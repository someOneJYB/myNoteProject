{"version":3,"sources":["webpack:///./src/page/Z/index.js","webpack:///./src/page/Z/q.js"],"names":["index","Input","React","Component","f","this","props","s","createElement","onChange","setState","a","F","Appa","e","form","setFieldValue","setFieldsValue","member","name","firstname","lastname","undefined","b","c","w","x","y","z","d","resetFields","v","v1","value","state","err","visible","visible1","WrappedComponent","EnhancedComponent","getFieldDecorator","onSubmit","onClick","initialValue","rules","indexOf","setField","comp","cloneElement","logProps","connect","Comp","ns","Array","isArray","forEach","forceUpdate","options","Error","inputProps","setProps","FieldElem","fieldMeta","metaFields","originalProps","ref","field","getField","action","fn","validateCb","cache","bind","target","type","checked","el","getDomVal","originChange","result","extraClassname","clearMetaCache","meta","instance","recoverClearedField","cb","val","extra","Object","keys","item","fieldOption","trigger","valuePropName","validate","validateTrigger","getCacheBind","onChangeValidate","onRefs","getFieldValue","pr","createForm"],"mappings":"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","file":"8.bundle.c6591cbb.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport createForm from './q'\n// react unmount 测试\nconst logProps = props => (comp) => React.cloneElement(comp)\n\n// 高阶函数的参数接受的是 WrappedComponent 组件，返回的是一个 class 需要使用<xxx/>是实例化使用\nfunction logProps1(WrappedComponent) {\n    return class extends React.Component {\n        componentWillReceiveProps(nextProps) {\n            console.log('Current props: ', this.props);\n            console.log('Next props: ', nextProps);\n        }\n        render() {\n            console.log(WrappedComponent, typeof WrappedComponent, '高阶组件')\n            // 用容器组件组合包裹组件且不修改包裹组件，这才是正确的打开方式。\n            return <WrappedComponent {...this.props} />;\n        }\n    }\n}\nlet index = 0\n\nconst logProps2 = (WrappedComponent) => {\n    console.log(WrappedComponent, typeof WrappedComponent, 'wwrrbghrfbhbjrfbhj')\n    var f = React.cloneElement(WrappedComponent, {\n        value: 7890377388,\n    })\n    var f1 = React.cloneElement(WrappedComponent, {\n        value: 7890377388,\n    })\n    console.log(f1.constructor === f.constructor)\n    return React.cloneElement(WrappedComponent, {\n        value: 7890377388,\n    })}\n\n\nclass Input extends React.Component {\n    componentWillUnmount() {\n        console.log('input unmount')\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        console.log('s', nextProps.s === this.props.s)\n        // this.setState({\n        //     a: 1,\n        // })\n    }\n\n    componentDidMount() {\n        console.log('input didmount')\n    }\n\n    render() {\n        console.log('render input')\n        const f = (this.props.s && React.createElement(this.props.s)) || null\n        // const f = React.cloneElement(this.props.s())\n        return <div><input onChange={() => { this.setState({ a: index++ }) }}/>{f}</div>\n    }\n}\nclass Hello extends React.Component {\n    componentWillUnmount() {\n        console.log(' hello unmount')\n    }\n    componentDidMount() {\n        console.log('fhello didmount')\n    }\n    render() {\n        return React.createElement('div', null, `Hello ${this.props.toWhat}`);\n    }\n}\nclass F extends React.Component {\n    componentWillUnmount() {\n        console.log(' f unmount')\n    }\n    componentDidMount() {\n        console.log('f didmount')\n    }\n\n    render() {\n        return <div>1209938848 我是 F</div>\n    }\n}\n\nclass Appa extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            err: false,\n            visible: true,\n            visible1: true,\n        }\n    }\n    // onSubmit = (e) => {\n    //     e.preventDefault();\n    //     // eslint-disable-next-line no-console\n    //     console.log('Values of member[0].name.firstname and a[0][1].b.c[0]');\n    //     // eslint-disable-next-line no-console\n    //     console.log(this.props.form.getFieldsValue(['member[0].name.firstname', 'a[0][1].b.c[0]']));\n    //     // eslint-disable-next-line no-console\n    //     console.log('Values of all fields');\n    //     // eslint-disable-next-line no-console\n    //     console.log(this.props.form.getFieldsValue());\n    //\n    //     this.props.form.validateFieldsAndScroll((error, values) => {\n    //         if (!error) {\n    //             // eslint-disable-next-line no-console\n    //             console.log('ok', values);\n    //         } else {\n    //             // eslint-disable-next-line no-console\n    //             console.log('error', error, values);\n    //         }\n    //     });\n    // }\n\n    onChange = (e) => {\n        this.props.form.setFieldValue('ab', 7)\n    }\n\n    setField = () => {\n        this.props.form.setFieldsValue({\n            member: [\n                {\n                    name: {\n                        firstname: 'm1 first',\n                        lastname: 'm1 last',\n                    },\n                },\n                {\n                    name: {\n                        firstname: 'm2 first',\n                        lastname: 'm2 last',\n                    },\n                },\n            ],\n            a: [\n                [undefined, {\n                    b: {\n                        c: ['Value of a[0][1].b.c[0]'],\n                    },\n                }],\n            ],\n            w: {\n                x: {\n                    y: {\n                        z: ['Value of w.x.y.z[0]'],\n                    },\n                },\n            },\n        });\n    }\n\n    componentWillUnmount() {\n        console.log('unmount大')\n    }\n\n    cell = props => d => <F/>\n\n    resetFields = () => {\n        this.props.form.resetFields();\n    }\n\n    renderInput = v => v1 => <Input value={v1}/>\n\n    render() {\n        console.log(this.props.profile, 'render')\n        const EnhancedComponent = logProps1(Input);\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <form onSubmit={this.onSubmit}>\n                <div onClick={() => this.setState({\n                    visible: !this.state.visible,\n                })}>显示或者隐藏</div>\n                {this.state.visible && getFieldDecorator('a', {\n                    initialValue: '212345678',\n                    rules: (value) => {\n                        // eslint-disable-next-line no-undef\n                        if (value.indexOf('1') > -1) {\n                            this.setState({\n                                err: true,\n                            })\n                        }\n                    },\n                })(\n                    <input\n                    />,\n                )}\n                <h1 onClick={() => this.setState({\n                    visible1: !this.state.visible1,\n                })}>ab</h1>\n                {this.state.visible1 && getFieldDecorator('ab', {\n                    initialValue: 'ab',\n                })(\n                    <input\n                        onChange={this.onChange}\n                    />,\n                )}\n                <button onClick={this.setField}>Set field</button>\n                <button onClick={this.resetFields}>Reset fields</button>\n                <button>Submit</button>\n                {/*{this.renderInput('34567833848484')}*/}\n                {logProps({ value: 123445 })(<EnhancedComponent/>)}\n                {/*{logProps2(<Input/>)}*/}\n                {/*<Input s={this.cell()}/>*/}\n                {/*<Hello/>*/}\n                {/*<EnhancedComponent/>*/}\n            </form>\n        );\n    }\n}\n\nexport default connect(function (state){\n    return {...state}\n})(createForm()(Appa))\n\n","import React from 'react'\n// 模拟 ant-form\nexport default function createForm(options) {\n    return function wrapComp(Comp) {\n        return class extends React.Component {\n            constructor(props) {\n                super(props);\n                // 收集变化的属性\n                this.state = {}\n                // 收集注册的组件对象\n                this.metaFields = {}\n                // 收集注册实例\n                this.instance = {}\n                // 收集注册的 onChange\n                this.cache = {}\n                this.clearMetaCache = {}\n            }\n            resetFields = (ns) => {\n                if (ns) {\n                    const names = Array.isArray(ns) ? ns : [ns];\n                    names.forEach((name) => {\n                        delete this.state[name].value\n                    });\n                } else {\n                    this.state = {}\n                }\n                this.forceUpdate()\n            }\n            getFieldDecorator = (name, options) => {\n                if (!name) {\n                    throw new Error('name is needed')\n                }\n                const inputProps = this.setProps(name, options)\n                return (FieldElem) => {\n                    const fieldMeta = this.metaFields[name];\n                    const originalProps = FieldElem.props;\n                    fieldMeta.originalProps = originalProps;\n                    fieldMeta.ref = FieldElem.ref;\n                    let v = fieldMeta.initialValue\n                    const field = this.getField(name);\n                    if (field && 'value' in field) {\n                        v = field.value;\n                    }\n                    console.log('decorator state', this.state, 'meta', this.metaFields)\n                    console.log(FieldElem)\n                    return React.cloneElement(FieldElem, {\n                        ...inputProps,\n                        value: v,\n                    });\n                };\n            }\n            getCacheBind = (name, action, fn, validateCb) => {\n                if (!this.cache[name]) {\n                    this.cache[name] = {};\n                }\n                const cache = this.cache[name];\n                if (!cache[action]) {\n                    if (validateCb) {\n                        cache[action] = fn.bind(this, name, validateCb);\n                    } else {\n                        cache[action] = fn.bind(this, name);\n                    }\n                }\n                return cache[action];\n            }\n            getDomVal = (e) => {\n                if (!e || !e.target) {\n                    return e;\n                }\n                const { target } = e;\n                return target.type === 'checkbox' ? target.checked : target.value;\n            }\n            getField = name => this.state[name] || {}\n            getFieldValue = (name) => {\n                if (!this.metaFields[name]) {\n                    throw new Error('请先注册')\n                }\n                return this.state[name] ? this.state[name].value : this.metaFields[name].initialValue\n            }\n            originChange = (name, v) => {\n                const { originalProps = {} } = this.metaFields[name]\n                if (originalProps && originalProps.onChange) {\n                    originalProps.onChange(v)\n                }\n            }\n            onChange = (name, el) => {\n                const v = this.getDomVal(el)\n                this.originChange(name, v)\n                this.setFieldValue(name, v)\n            }\n            onChangeValidate = (name, rules, el) => {\n                const v = this.getDomVal(el);\n                // 自定义校验函数返回不同的 className\n                this.originChange(name, v)\n                const result = rules(v);\n                // 注入到state中\n                if (!this.state[name]) {\n                    this.state[name] = {}\n                }\n                this.setFieldValue(name, v, { extraClassname: result })\n            }\n            onRefs = (name, el) => {\n                if (!el) {\n                    this.clearMetaCache[name] = {\n                        field: this.state[name],\n                        meta: this.metaFields[name],\n                    };\n                    delete this.state[name]\n                    // 收集注册的组件对象\n                    delete this.metaFields[name]\n                    // 收集注册实例\n                    delete this.instance[name]\n                    // 收集注册的 onChange\n                    delete this.cache[name]\n                    console.log('ref state', this.state, 'meta', this.metaFields)\n                    return;\n                }\n                this.recoverClearedField(name)\n                const fieldMeta = this.metaFields[name];\n                if (fieldMeta) {\n                    const ref = fieldMeta.ref;\n                    if (ref) {\n                        ref(el);\n                    }\n                }\n                this.instance[name] = el;\n            }\n            recoverClearedField = (name) => {\n                if (this.clearMetaCache[name]) {\n                    this.state[name] = this.clearMetaCache[name].state;\n                    this.metaFields[name] = this.clearMetaCache[name].meta;\n                    delete this.clearMetaCache[name];\n                }\n            }\n            validateAll = (cb) => {\n\n            }\n            setFieldValue = (name, val, extra) => {\n                if (!this.metaFields[name]) {\n                    throw new Error('请先注册')\n                }\n                if (!this.state[name]) {\n                    this.state[name] = {}\n                }\n                extra && Object.keys(extra).forEach((item) => {\n                    this.state[name][item] = extra[item]\n                })\n                this.state[name].value = val || '';\n                console.log('forceupdate', val)\n                this.forceUpdate();\n            }\n            setProps = (name, options) => {\n                delete this.clearMetaCache[name];\n                const fieldOption = {\n                    name,\n                    trigger: 'onChange',\n                    valuePropName: 'value',\n                    validate: [],\n                    ...options,\n                };\n                const {\n                    rules,\n                    trigger = 'onChange',\n                    initialValue = '',\n                    validateTrigger = 'onChange' } = fieldOption;\n                const inputProps = {\n                    value: initialValue,\n                };\n                if (rules && validateTrigger) {\n                    inputProps[validateTrigger] = this.getCacheBind(name, validateTrigger, this.onChangeValidate, rules);\n                }\n                if (validateTrigger !== trigger || !rules) {\n                    inputProps[trigger] = this.getCacheBind(name, trigger, this.onChange);\n                }\n                const field = this.getField(name);\n                if (field && 'value' in field) {\n                    inputProps.value = field.value;\n                }\n                const fieldMeta = this.metaFields[name] || {};\n                fieldMeta.rules = rules;\n                fieldMeta.initialValue = initialValue;\n                fieldMeta[name] = name\n                inputProps.ref = this.getCacheBind(name, 'ref', this.onRefs);\n                this.metaFields[name] = fieldMeta;\n                return inputProps;\n            }\n            render() {\n                console.log('state', this.state, 'meta', this.metaFields)\n                const form = {\n                    getFieldDecorator: this.getFieldDecorator,\n                    setFieldValue: this.setFieldValue,\n                    resetFields: this.resetFields,\n                    getFieldValue: this.getFieldValue,\n                }\n                const pr = {\n                    ...this.props,\n                    form: form,\n                }\n                return (<Comp {...pr}/>)\n            }\n        }\n    }\n}\n"],"sourceRoot":""}