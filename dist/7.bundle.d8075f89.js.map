{"version":3,"sources":["webpack:///./src/page/hook/ctx.js","webpack:///./src/page/hook/context.js","webpack:///./src/page/hook/defineHook.js","webpack:///./src/page/hook/index.js"],"names":["AppContext","React","createContext","username","useContext","className","changed","titleId","useState","title","setTitle","useEffect","myReducer","state","action","type","num","Home","useReducer","dispatch","count","setCount","latestCount","useRef","current","setTimeout","mount","number","setNumber","Provider","value","onClick","defineHook","alert"],"mappings":"6MAEaA,EAAaC,IAAMC,cAAc,ICA/B,aAAM,IACTC,EAAaC,qBAAWJ,GAAxBG,SAER,OACI,yBAAKE,UAAU,YACX,+CACA,4CAAkBF,GAClB,uBAAGE,UAAU,WAAb,4B,u8BCRZ,IAAIC,EAAU,EACC,WAASC,GAAS,QAEHC,mBAASD,GAFN,GAEtBE,EAFsB,KAEfC,EAFe,KAO7B,OAJAC,oBAAU,WACND,EAAS,OAAD,SAAUJ,KACnB,CAACC,IAEG,2BAAIE,I,kyCCAf,IAEMG,EAAY,SAACC,EAAOC,GACtB,OAAOA,EAAOC,MACV,IAAK,UACD,O,2VAAA,IACOF,EADP,CAEIG,IAAKH,EAAMG,IAAM,IAEzB,QACI,OAAOH,IAGJ,SAASI,IAAO,QAEDC,qBAAWN,EAAW,CAAEI,IAAK,IAF5B,GAEpBH,EAFoB,KAEbM,EAFa,SAIDX,mBAAS,GAJR,GAIpBY,EAJoB,KAIbC,EAJa,SAKDb,mBAAS,UALR,GAKpBC,EALoB,KAKbC,EALa,KAOrBY,EAAcC,iBAAOH,GAE3BT,oBAAU,WAENW,EAAYE,QAAUJ,EAItBK,WAAW,aAGR,OAGPd,oBAAU,WAUN,OAAO,WACHe,IAGL,IAnCwB,QAoCFlB,mBAAS,GApCP,GAoCtBmB,EApCsB,KAoCfC,EApCe,KA2C3B,OACI,kBAAC5B,EAAW6B,SAAZ,CAAqBC,MAAO,CACxB3B,SAAU,iBAEV,kBAAC,EAAD,MACA,uBAAGE,UAAU,UAAb,eAAmCe,EAAnC,UACA,4BAAQW,QAAS,kBAAMV,EAASD,EAAQ,KAAxC,OAGCY,EAAWvB,GACZ,yBAAKsB,QAAS,kBAAMrB,EAASD,EAAQ,WAArC,cACA,qCAAWkB,GACX,yBAAKI,QAAS,kBAAIZ,EAAS,CAAEJ,KAAM,cAAnC,cAA6DF,EAAMG,KACnE,4BAAQe,QAAS,kBAAIH,EAAUD,EAAO,KAAtC,KACA,4BAAQI,QApBhB,WACIN,WAAW,WAEPQ,MAAMN,IACR,OAgBE","file":"7.bundle.d8075f89.js","sourcesContent":["import React from \"react\";\n\nexport const AppContext = React.createContext({});\n","import React, { useContext } from \"react\";\nimport { AppContext } from './ctx'\nexport default () => {\n    const { username } = useContext(AppContext)\n\n    return (\n        <div className=\"messages\">\n            <h1>Messages hahaha</h1>\n            <p>1 message for {username}</p>\n            <p className=\"message\">useContext is awesome!</p>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nlet changed = 0\nexport default function(titleId) {\n    console.log('自定义的')\n    const [title, setTitle] = useState(titleId)\n    useEffect(() => {\n        setTitle(`变化次数${++changed}`)\n    }, [titleId])\n\n    return <p>{title}</p>;\n}\n","import React, { useState, useEffect, useForceUpdate, useRef, useReducer, userContext } from 'react'\nimport Message from './context'\nimport defineHook from './defineHook'\nimport './hehehe.less'\n// 有state的 function component 执行 setXX 的时候会重新 render，重新执行整个函数\n// 有没有第二个参数。useEffect hook 接受两个参数，第一个是要执行的代码，第二个是一个数组，指定一组依赖的变量，其中任何一个变量发生变化时，此 effect 都会重新执行一次。有没有返回值。 useEffect 的执行代码中可以返回一个函数，在每一次新的 render 进行前或者组件 unmount 之时，都会执行此函数，进行清理工作。\n// useEffect 第二个参数是空数组的时候setCount 无法在 useEffect 中得到值，只会默认初始值。加上第二个值的话会在这个值变化的时候执行\n// 会在每次 render 的时候必定执行一次。如果返回了函数，那么在下一次 render 之前或组件 unmount 之前必定会运行一次返回函数的代码。如果指定了依赖数组，且不为空，则当数组里的每个元素发生变化时，都会重新运行一次。如果数组为空，则只在第一次 render 时执行一次，如果有返回值，则同 3。如果在 useEffect 中更新了 state，且没有指定依赖数组，或 state 存在于依赖数组中，就会造成死循环。\n// useEffect 中会导致出现闭包行为\nlet mount = false;\nimport { AppContext } from './ctx'\nconst myReducer = (state, action) => {\n    switch(action.type) {\n        case('countUp'):\n            return {\n                ...state,\n                num: state.num + 1\n            }\n        default:\n            return state\n    }\n}\nexport default function Home() {\n    console.log('home render')\n    const [state, dispatch] = useReducer(myReducer, { num: 0 })\n    // Declare a new state variable, which we'll call \"count\"\n    const [count, setCount] = useState(0);\n    const [title, setTitle] = useState('hahaha');\n    console.log('点击', count)\n    const latestCount = useRef(count);\n    // 在每次外部\n    useEffect(() => {\n        // Set the mutable latest value\n        latestCount.current = count;\n        if (mount) {\n            console.log('did update')\n        }\n        setTimeout(()=> {\n            // 满足了要求不再是必包\n            console.log('count', latestCount.current)\n        }, 2000)\n        // 连续点击三次重新渲染的时候会依此输出1 2 3 而不是三次3这个就是必报的问题\n    }, );\n    useEffect(function() {\n        if(!mount) {\n            mount = true\n            console.log('didMount')\n        }\n        // console.log('effect')\n        // setTimeout(()=> {\n        //     console.log('count', count)\n        // }, 2000)\n        // 返回函数让mount在unmount时候被卸载\n        return () => {\n            mount = false;\n            console.log('unmount')\n        }\n    }, []);\n    let [number,setNumber] = useState(0);\n    function alertNumber(){\n        setTimeout(()=>{\n            // alert 只能获取到点击按钮时的那个状态\n            alert(number);\n        },3000);\n    }\n    return (\n        <AppContext.Provider value={{\n            username: 'superawesome'\n        }}>\n            <Message/>\n            <p className=\"p-text\">You clicked {count} times</p>\n            <button onClick={() => setCount(count + 1)}>\n                点击我\n            </button>\n            {defineHook(title)}\n            <div onClick={() => setTitle(title + 'wocao')}>点击我改变title</div>\n            <p>number：{number}</p>\n            <div onClick={()=>dispatch({ type: 'countUp' })}>useReducer {state.num}</div>\n            <button onClick={()=>setNumber(number+1)}>+</button>\n            <button onClick={alertNumber}>打印目前的按钮状态</button>\n        </AppContext.Provider>\n    );\n}\n"],"sourceRoot":""}